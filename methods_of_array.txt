...................................................................Array creation.........................................................
3.0.1 :020 > arr=Array.new
 => [] 
3.0.1 :021 > arr=Array.new(10)
 => [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil] 
3.0.1 :022 > 

3.0.1 :006 > arr=Array.new(5,0)
 => [0, 0, 0, 0, 0] 

3.0.1 :007 > arr=Array.new(5,'mac')
 => ["mac", "mac", "mac", "mac", "mac"] 
3.0.1 :008 > 

3.0.1 :009 > num=Array.new(10){|i| i=i*2}
 => [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] 
3.0.1 :010 >

3.0.1 :011 > num=Array.[](1,2,3,4,5)
 => [1, 2, 3, 4, 5] 
3.0.1 :012 > 
3.0.1 :024 > num=Array[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 

3.0.1 :025 > nums=Array(0..9)
 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 

3.0.1 :026 > arr=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 

3.0.1 :027 > arr.class
 => Array 

3.0.1 :028 > arr=[1,2,'two',3.0,5.66]
 => [1, 2, "two", 3.0, 5.66] 
3.0.1 :029 > 
3.0.1 :033 > arr=Array.new(4){ Array.new(3,true)}
 => [[true, true, true], [true, true, true], [true, true, true], [true, tr.

3.0.1 :030 > arr=Array.new(4){Hash.new}
 => [{}, {}, {}, {}] 


......................................................................Array built in methods............................................

3.0.1 :038 > arr=[1,2,3,4,5,6,7,8,9]
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
3.0.1 :053 > arr[2] 
=> 3 
3.0.1 :053 > arr[100]
 => nil

3.0.1 :053 > arr[0] 
 => 1 

3.0.1 :053 > arr[-1]
 => 9 

3.0.1 :053 > arr[-3]
 => 7 

3.0.1 :044 > arr[2,3]
 => [3, 4, 5] 

3.0.1 :045 > arr[2..3]
 => [3, 4] 

3.0.1 :046 > arr[1..7]
 => [2,3,4,5,6,7,8]

3.0.1 :047 > arr[0..7]
 => [1,2,3,4,5,6,7,8]

3.0.1 :048 > arr[0...7]
 => [1,2,3,4,5,6,7]

3.0.1 :049 > arr[0..-3]
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.1 :050 > arr[0..-6]
 => [1, 2, 3, 4] 
3.0.1 :051 > arr.at(6)
 => 7 
3.0.1 :052 > arr.at(0)
 => 1 
3.0.1 :053 > arr.fetch(100)  # it show error

3.0.1 :054 > arr.fetch(100,'oops')   # print and error message.....
 => "oops" 
3.0.1 :055 > arr.first
 => 1 
3.0.1 :056 > arr.last
 => 9 
3.0.1 :058 > arr.take(3)      #take only 3 element from start
 => [1, 2, 3] 
3.0.1 :060 > arr.drop(3)      # display all elements except first 3. 
 => [4, 5, 6, 7, 8, 9]
...................................................................................................................................
                                                                array push element...................
3.0.1 :061 > arr.length
 => 9 
3.0.1 :062 > arr.count
 => 9 
3.0.1 :063 > arr.empty?
 => false 
3.0.1 :064 > arr.include?('9')
 => false 
3.0.1 :065 > arr.include?(9)
 => true 
3.0.1 :066 > arr
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
3.0.1 :067 > arr.push(10)
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
3.0.1 :068 > arr << 11
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] 
3.0.1 :069 > arr.unshift(0)
 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] 
3.0.1 :070 > arr.insert(3,'vicky')
 => [0, 1, 2, "vicky", 3, 4, 5, 6, 7, 8, 9, 10, 11] 
.............................................................    array pop element..............

3.0.1 :072 > arr.pop
 => 11 
3.0.1 :073 > arr
 => [0, 1, 2, "vicky", 3, 4, 5, 6, 7, 8, 9, 10] 

3.0.1 :074 > arr.shift
 => 0 
3.0.1 :075 > arr
 => [1, 2, "vicky", 3, 4, 5, 6, 7, 8, 9, 10] 

3.0.1 :076 > arr.delete_at(3)
 => 3 
3.0.1 :077 > arr
 => [1, 2, "vicky", 4, 5, 6, 7, 8, 9, 10] 

3.0.1 :078 > arr.delete_at(2)                   # delete_at delete the element of given index 
 => "vicky" 
3.0.1 :079 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9, 10] 

3.0.1 :080 > arr.delete(10)                   # delete method delete an specific element from array 
 => 10 
3.0.1 :081 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9] 
3.0.1 :082 > 

3.0.1 :086 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9, nil, nil, nil]   ## remove all nil value from array.............
3.0.1 :087 > arr.compact
 => [1, 2, 4, 5, 6, 7, 8, 9] 
3.0.1 :088 > 

.........................................................................................................................................
                                                            remove duplicates from array.......using arr.uniq.......
                                                             return another array with all uniq elements........
3.0.1 :098 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9, 9, 5, 7] 
3.0.1 :099 > arr.uniq
 => [1, 2, 4, 5, 6, 7, 8, 9] 
...................................................................................................................................

3.0.1 :109 > arr.each {|ele| print ele-=1," " }                # iterate array using .each method............
0 1 3 4 5 6 7 8  => [1, 2, 4, 5, 6, 7, 8, 9] 


3.0.1 :110 > words=%w[ruby provide %w to take string array with space]
 => ["ruby", "provide", "%w", "to", "take", "string", "array", "with", "sp... 

3.0.1 :111 > str=""
 => "" 

3.0.1 :112 > words.reverse_each {|wrd| str+="#{wrd} "}                               # iterate in reverse using reverse_each method......
 => ["ruby", "provide", "%w", "to", "take", "string", "array", "with", "space"] 

3.0.1 :267 > puts str
  space  with  array  string  take  to  %w  provide  ruby 
 => nil 

.........................................................................................................................................
                                                            array.map function create another array using block modifiaction.....
3.0.1 :113 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9] 

3.0.1 :114 > arr.map {|e| 2*e}
 => [2, 4, 8, 10, 12, 14, 16, 18] 

3.0.1 :115 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9] 

3.0.1 :116 > arr.map {|e| e**2}
 => [1, 4, 16, 25, 36, 49, 64, 81] 

..................................................................array select element methods...........................................
                                                                   # reject,drop,drop_while    
3.0.1 :117 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9] 
3.0.1 :118 > arr.select {|a| a>4}
 => [5, 6, 7, 8, 9] 

3.0.1 :119 > arr.select {|a| a>=4}
 => [4, 5, 6, 7, 8, 9] 

3.0.1 :120 > arr.reject {|a| a>=4}
 => [1, 2] 
 
3.0.1 :271 > a.drop(2)
 => [4, 5, 6, 7, 8, 9] 

3.0.1 :122 > arr.drop_while {|a| a<4}
 => [4, 5, 6, 7, 8, 9] 
3.0.1 :123 > 

..................................................................... # keep_if,delete_if.................

3.0.1 :125 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9] 

3.0.1 :126 > arr.keep_if {|e| e<8}
 => [1, 2, 4, 5, 6, 7] 
3.0.1 :127 > arr
 => [1, 2, 4, 5, 6, 7] 

3.0.1 :128 > arr.delete_if {|e| e>6}
 => [1, 2, 4, 5, 6] 

3.0.1 :129 > arr
 => [1, 2, 4, 5, 6] 
3.0.1 :130 > 

3.0.1 :311 > ar=%w[a b c d e]
 => ["a", "b", "c", "d", "e"] 
3.0.1 :312 > ar.keep_if {|v| v=~ /[acde]/}
 => ["a", "c", "d", "e"] 

........................................................................................................................

3.0.1 :133 > arr=[1,2,'a','b',3]                        #create another array by using another array using arr2=Array.new(arr)
 => [1, 2, "a", "b", 3] 

3.0.1 :134 > arr1=Array.new(arr)                        new array not equal to privious array.   
 => [1, 2, "a", "b", 3] 

3.0.1 :135 > arr1
 => [1, 2, "a", "b", 3] 

3.0.1 :137 > arr1.equal? arr
 => false 
3.0.1 :138 > 

...................................................................................................................................
                                                         create hash function insisde array...

3.0.1 :146 > a=Array.new(2,Hash.new)
 => [{}, {}] 

3.0.1 :147 > a[0][0]='cat'             # add aelenet to the array hash.....
 => "cat" 
3.0.1 :148 > a
 => [{0=>"cat"}, {0=>"cat"}] 

3.0.1 :149 > a[0][1]='dog'
 => "dog" 

3.0.1 :150 > a
 => [{0=>"cat", 1=>"dog"}, {0=>"cat", 1=>"dog"}]                        #add same hash elements in all hash objects......
3.0.1 :151 > 

.....................................................................

3.0.1 :151 > arr=Array.new(2) {Hash.new}
 => [{}, {}] 

3.0.1 :152 > arr[0][0]='cat'
 => "cat" 

3.0.1 :153 > arr[0][1]='dog'
 => "dog" 

3.0.1 :154 > arr
 => [{0=>"cat", 1=>"dog"}, {}] 

3.0.1 :155 > 

.......................................................................................................................................
                                                                       & operator between two array...

3.0.1 :157 > a
 => [{0=>"cat", 1=>"dog"}, {0=>"cat", 1=>"dog"}] 
3.0.1 :158 > arr
 => [{0=>"cat", 1=>"dog"}, {}] 

3.0.1 :159 > a & arr
 => [{0=>"cat", 1=>"dog"}] 

3.0.1 :160 > arr1
 => [1, 2, "a", "b", 3] 

3.0.1 :161 > arr2=[1,2,2,3,'a']
 => [1, 2, 2, 3, "a"] 

3.0.1 :162 > arr1 & arr2
 => [1, 2, "a", 3] 

3.0.1 :163 > 
..................................................................................................................................

3.0.1 :163 > a=[1,2,3,4]
 => [1, 2, 3, 4] 
3.0.1 :164 > b=[6,7,8,9]
 => [6, 7, 8, 9] 

3.0.1 :166 > c=a+b                           # + operator create new array by join both array
 => [1, 2, 3, 4, 6, 7, 8, 9] 
3.0.1 :167 > c
 => [1, 2, 3, 4, 6, 7, 8, 9] 
3.0.1 :168 > c+[10,11,12,13]
 => [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13] 
3.0.1 :169 > c
 => [1, 2, 3, 4, 6, 7, 8, 9] 

3.0.1 :170 > d=c-a                            # - operator create new array by removing the elemnt present in both element....
 => [6, 7, 8, 9] 

3.0.1 :178 > a*2                              # * opeator create new array same elements n times......
   => [1, 2, 3, 4, 1, 2, 3, 4] 
3.0.1 :179 > 
.....................................................................................................................................
                                                      array associativity array.assoc() .....
                                                      print  array if first element is matched......
3.0.1 :193 > arr1 = [1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
3.0.1 :194 > arr2 = %w[a b c d e]
 => ["a", "b", "c", "d", "e"] 

3.0.1 :195 > array = [arr1, arr2]
 => [[1, 2, 3, 4, 5], ["a", "b", "c", "d", "e"]] 

3.0.1 :196 > a = array.assoc(1)
 => [1, 2, 3, 4, 5] 

3.0.1 :197 > a = array.assoc('a')
 => ["a", "b", "c", "d", "e"] 
.........................................................................................................................................
                                                                bsearch{|| condition}........                                                  

 => [2, 6, 4, 7, 1] 
3.0.1 :224 > a.bsearch{|x| x>=4 }
 => 6 

3.0.1 :225 > arr=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
3.0.1 :226 > arr.bsearch{|x| x>=4}
 => 4 
3.0.1 :227 > 

.......................................................................................................................
                                                     collect return new array based on block condition......
3.0.1 :229 > a=%w[a b c d e]
 => ["a", "b", "c", "d", "e"] 
3.0.1 :230 > a.collect {|x| x+"!"}
 => ["a!", "b!", "c!", "d!", "e!"] 

3.0.1 :231 > a.collect {|x| x*2}
 => ["aa", "bb", "cc", "dd", "ee"] 
3.0.1 :232 > a

3.0.1 :237 > c=a.map.with_index{|x, i| x*i}
 => ["", "b", "cc", "ddd", "eeee"] 
3.0.1 :238 > c
.........................................................................................................................
                                                   array.combination(n)  find all combination of n elemets.... 
3.0.1 :242 > a
 => [1, 2, 3, 4, 5] 
3.0.1 :243 > a.combination(1)
 => #<Enumerator: ...> 

3.0.1 :244 > a.combination(1).to_a
 => [[1], [2], [3], [4], [5]] 

3.0.1 :245 > a.combination(2).to_a
 => [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]] 

3.0.1 :246 > a.combination(3).to_a
 => [[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]] 

3.0.1 :247 > a.combination(4).to_a
 => [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]] 

3.0.1 :248 > a.combination(5).to_a
 => [[1, 2, 3, 4, 5]] 

3.0.1 :249 > a.combination(6).to_a
 => [] 
3.0.1 :250 > 

...............................................................................................................................
                                                        array.count........
3.0.1 :251 > a
 => [1, 2, 3, 4, 5] 
3.0.1 :252 > a.count
 => 5 
3.0.1 :253 > a.count{|x| x%2==0}
 => 2 
3.0.1 :254 > a.count(2)
 => 1 
3.0.1 :255 > 
...........................................................array .fill function ..........................

3.0.1 :272 > a
 => [1, 2, 3, 4, 5] 
3.0.1 :273 > a.fill('x')
 => ["x", "x", "x", "x", "x"] 
3.0.1 :274 > a
 => ["x", "x", "x", "x", "x"] 
3.0.1 :275 > 

3.0.1 :276 > a.fill('z',2,3)
 => ["x", "x", "z", "z", "z"] 

3.0.1 :277 > a.fill(2,3)
 => ["x", "x", "z", 2, 2] 

3.0.1 :280 > a.fill(1,0..4)
 => [1, 1, 1, 1, 1] 

3.0.1 :285 > a.fill{|i| i+=1}
 => [1, 2, 3, 4, 5] 
...........................................................array.flatten function return new dimentional array from nd array ........

3.0.1 :288 > a
 => [1, 2, 3, 4, 5] 
3.0.1 :289 > b
 => ["aa", "bb", "cc", "dd", "ee"] 
3.0.1 :290 > c
 => ["", "b", "cc", "ddd", "eeee"] 

3.0.1 :294 > lst=[a,b,c]
 => [[1, 2, 3, 4, 5], ["aa", "bb", "cc", "dd", "ee"], ["", "b", "cc", "ddd", "eee... 

3.0.1 :295 > lst.flatten
 => [1, 2, 3, 4, 5, "aa", "bb", "cc", "dd", "ee", "", "b", "cc", "ddd", "eeee"] 

 
3.0.1 :299 > a.push([6,7])
 => [1, 2, 3, 4, 5, [6, 7]] 
3.0.1 :300 > lst=[a,b,c]
 => 
[[1, 2, 3, 4, 5, [6, 7]],
... 
3.0.1 :301 > lst
 => 
[[1, 2, 3, 4, 5, [6, 7]],
 ["aa", "bb", "cc", "dd", "ee"],
 ["", "b", "cc", "ddd", "eeee"]] 

3.0.1 :302 > lst.flatten(1)
 => [1, 2, 3, 4, 5, [6, 7], "aa", "bb", "cc", "dd", "ee", "", "b", "cc", "ddd", "eeee"] 

3.0.1 :303 > lst.flatten
 => [1, 2, 3, 4, 5, 6, 7, "aa", "bb", "cc", "dd", "ee", "", "b", "cc", "ddd", "eeee"] 

.....................................................................................................................
                                                 find permutation all permutaion od arr
3.0.1 :323 > a=[1,2,3]
 => [1, 2, 3] 

3.0.1 :327 > b=a.permutation.to_a
 => [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] 

3.0.1 :328 > c=a.permutation(1).to_a
 => [[1], [2], [3]] 

3.0.1 :329 > d=a.permutation(2).to_a
 => [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] 

3.0.1 :337 > arr=[b,c,d]
=> 
[[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]],
 [[1], [2], [3]],
 [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]]

3.0.1 :343 > arr.flatten(1)
 => 
[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1], [1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] 

.........................................................................................................................................


