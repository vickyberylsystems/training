...................................................................Array creation.........................................................
3.0.1 :020 > arr=Array.new
 => [] 
3.0.1 :021 > arr=Array.new(10)
 => [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil] 
3.0.1 :022 > 

3.0.1 :006 > arr=Array.new(5,0)
 => [0, 0, 0, 0, 0] 

3.0.1 :007 > arr=Array.new(5,'mac')
 => ["mac", "mac", "mac", "mac", "mac"] 
3.0.1 :008 > 

3.0.1 :009 > num=Array.new(10){|i| i=i*2}
 => [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] 
3.0.1 :010 >

3.0.1 :011 > num=Array.[](1,2,3,4,5)
 => [1, 2, 3, 4, 5] 
3.0.1 :012 > 
3.0.1 :024 > num=Array[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 

3.0.1 :025 > nums=Array(0..9)
 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 

3.0.1 :026 > arr=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 

3.0.1 :027 > arr.class
 => Array 

3.0.1 :028 > arr=[1,2,'two',3.0,5.66]
 => [1, 2, "two", 3.0, 5.66] 
3.0.1 :029 > 
3.0.1 :033 > arr=Array.new(4){ Array.new(3,true)}
 => [[true, true, true], [true, true, true], [true, true, true], [true, tr.

3.0.1 :030 > arr=Array.new(4){Hash.new}
 => [{}, {}, {}, {}] 


......................................................................Array built in methods............................................

3.0.1 :038 > arr=[1,2,3,4,5,6,7,8,9]
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
3.0.1 :053 > arr[2] 
=> 3 
3.0.1 :053 > arr[100]
 => nil

3.0.1 :053 > arr[0] 
 => 1 

3.0.1 :053 > arr[-1]
 => 9 

3.0.1 :053 > arr[-3]
 => 7 

3.0.1 :044 > arr[2,3]
 => [3, 4, 5] 

3.0.1 :045 > arr[2..3]
 => [3, 4] 

3.0.1 :046 > arr[1..7]
 => [2,3,4,5,6,7,8]

3.0.1 :047 > arr[0..7]
 => [1,2,3,4,5,6,7,8]

3.0.1 :048 > arr[0...7]
 => [1,2,3,4,5,6,7]

3.0.1 :049 > arr[0..-3]
 => [1, 2, 3, 4, 5, 6, 7] 

3.0.1 :050 > arr[0..-6]
 => [1, 2, 3, 4] 
3.0.1 :051 > arr.at(6)
 => 7 
3.0.1 :052 > arr.at(0)
 => 1 
3.0.1 :053 > arr.fetch(100)  # it show error

3.0.1 :054 > arr.fetch(100,'oops')   # print and error message.....
 => "oops" 
3.0.1 :055 > arr.first
 => 1 
3.0.1 :056 > arr.last
 => 9 
3.0.1 :058 > arr.take(3)      #take only 3 element from start
 => [1, 2, 3] 
3.0.1 :060 > arr.drop(3)      # display all elements except first 3. 
 => [4, 5, 6, 7, 8, 9]
...................................................................................................................................
                                                                array push element...................
3.0.1 :061 > arr.length
 => 9 
3.0.1 :062 > arr.count
 => 9 
3.0.1 :063 > arr.empty?
 => false 
3.0.1 :064 > arr.include?('9')
 => false 
3.0.1 :065 > arr.include?(9)
 => true 
3.0.1 :066 > arr
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
3.0.1 :067 > arr.push(10)
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
3.0.1 :068 > arr << 11
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] 
3.0.1 :069 > arr.unshift(0)
 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] 
3.0.1 :070 > arr.insert(3,'vicky')
 => [0, 1, 2, "vicky", 3, 4, 5, 6, 7, 8, 9, 10, 11] 
.............................................................    array pop element..............

3.0.1 :072 > arr.pop
 => 11 
3.0.1 :073 > arr
 => [0, 1, 2, "vicky", 3, 4, 5, 6, 7, 8, 9, 10] 
3.0.1 :074 > arr.shift
 => 0 
3.0.1 :075 > arr
 => [1, 2, "vicky", 3, 4, 5, 6, 7, 8, 9, 10] 
3.0.1 :076 > arr.delete_at(3)
 => 3 
3.0.1 :077 > arr
 => [1, 2, "vicky", 4, 5, 6, 7, 8, 9, 10] 

3.0.1 :078 > arr.delete_at(2)                   # delete_at delete the element of given index 
 => "vicky" 
3.0.1 :079 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9, 10] 

3.0.1 :080 > arr.delete(10)                   # delete method delete an specific element from array 
 => 10 
3.0.1 :081 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9] 
3.0.1 :082 > 

3.0.1 :086 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9, nil, nil, nil]   ## remove all nil value from array.............
3.0.1 :087 > arr.compact
 => [1, 2, 4, 5, 6, 7, 8, 9] 
3.0.1 :088 > 

.........................................................................................................................................
                                                            remove duplicates from array.......using arr.uniq.......
                                                             return another array with all uniq elements........
3.0.1 :098 > arr
 => [1, 2, 4, 5, 6, 7, 8, 9, 9, 5, 7] 
3.0.1 :099 > arr.uniq
 => [1, 2, 4, 5, 6, 7, 8, 9] 
...................................................................................................................................

3.0.1 :109 > arr.each {|ele| print ele-=1," " }                # iterate array using .each method............
0 1 3 4 5 6 7 8  => [1, 2, 4, 5, 6, 7, 8, 9] 


3.0.1 :110 > words=%w[ruby provide %w to take string array with space]
 => ["ruby", "provide", "%w", "to", "take", "string", "array", "with", "sp... 

3.0.1 :111 > str=""
 => "" 

3.0.1 :112 > words.reverse_each {|wrd| str+="#{wrd}"}                               # iterate in reverse using reverse_each method......
 => ["ruby", "provide", "%w", "to", "take", "string", "array", "with", "space"] 



3.0.1 :113 > 


